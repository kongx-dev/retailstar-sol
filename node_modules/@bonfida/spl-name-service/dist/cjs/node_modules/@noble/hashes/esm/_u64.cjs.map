{"version":3,"file":"_u64.cjs","sources":["../../../../../../node_modules/@noble/hashes/esm/_u64.js"],"sourcesContent":["/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    const len = lst.length;\n    let Ah = new Uint32Array(len);\n    let Al = new Uint32Array(len);\n    for (let i = 0; i < len; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map"],"names":["U32_MASK64","BigInt","_32n","fromBig","n","le","h","Number","l","Ah","Al","Bh","Bl","add3H","low","Ch","add3L","Cl","add4H","Dh","add4L","Dl","add5H","Eh","add5L","El","rotrBH","s","rotrBL","rotrSH","rotrSL","shrSH","_l","shrSL","lst","len","length","Uint32Array","i"],"mappings":"aAKA,MAAMA,EAA6BC,OAAO,GAAK,GAAK,GAC9CC,EAAuBD,OAAO,IAEpC,SAASE,EACPC,EACAC,GAAK,GAKL,OAAIA,EAAW,CAAEC,EAAGC,OAAOH,EAAIJ,GAAaQ,EAAGD,OAAQH,GAAKF,EAAQF,IAC7D,CAAEM,EAAsC,EAAnCC,OAAQH,GAAKF,EAAQF,GAAiBQ,EAA4B,EAAzBD,OAAOH,EAAIJ,GAClE,aAmCA,SACES,EACAC,EACAC,EACAC,GAKA,MAAMJ,GAAKE,IAAO,IAAME,IAAO,GAC/B,MAAO,CAAEN,EAAIG,EAAKE,GAAOH,EAAI,GAAK,GAAM,GAAM,EAAGA,EAAO,EAAJA,EACtD,gBAGcK,CAACC,EAAaL,EAAYE,EAAYI,IACjDN,EAAKE,EAAKI,GAAOD,EAAM,GAAK,GAAM,GAAM,gBAF7BE,CAACN,EAAYE,EAAYK,KAAwBP,IAAO,IAAME,IAAO,IAAMK,IAAO,iBAKlFC,CAACJ,EAAaL,EAAYE,EAAYI,EAAYI,IAC7DV,EAAKE,EAAKI,EAAKI,GAAOL,EAAM,GAAK,GAAM,GAAM,gBAHlCM,CAACV,EAAYE,EAAYK,EAAYI,KAChDX,IAAO,IAAME,IAAO,IAAMK,IAAO,IAAMI,IAAO,iBAKnCC,CAACR,EAAaL,EAAYE,EAAYI,EAAYI,EAAYI,IACzEd,EAAKE,EAAKI,EAAKI,EAAKI,GAAOT,EAAM,GAAK,GAAM,GAAM,gBAHvCU,CAACd,EAAYE,EAAYK,EAAYI,EAAYI,KAC5Df,IAAO,IAAME,IAAO,IAAMK,IAAO,IAAMI,IAAO,IAAMI,IAAO,oCAnC/CC,CAACpB,EAAWE,EAAWmB,IAAuBrB,GAAM,GAAKqB,EAAOnB,IAAOmB,EAAI,kBAC3EC,CAACtB,EAAWE,EAAWmB,IAAuBrB,IAAOqB,EAAI,GAAQnB,GAAM,GAAKmB,iBAJ5EE,CAACvB,EAAWE,EAAWmB,IAAuBrB,IAAMqB,EAAMnB,GAAM,GAAKmB,iBACrEG,CAACxB,EAAWE,EAAWmB,IAAuBrB,GAAM,GAAKqB,EAAOnB,IAAMmB,gBAJvEI,CAACzB,EAAW0B,EAAYL,IAAsBrB,IAAMqB,gBACpDM,CAAC3B,EAAWE,EAAWmB,IAAuBrB,GAAM,GAAKqB,EAAOnB,IAAMmB,gBAdpF,SAAeO,EAAe7B,GAAK,GACjC,MAAM8B,EAAMD,EAAIE,OAChB,IAAI3B,EAAK,IAAI4B,YAAYF,GACrBzB,EAAK,IAAI2B,YAAYF,GACzB,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAKG,IAAK,CAC5B,MAAMhC,EAAEA,EAACE,EAAEA,GAAML,EAAQ+B,EAAII,GAAIjC,IAChCI,EAAG6B,GAAI5B,EAAG4B,IAAM,CAAChC,EAAGE,EACvB,CACA,MAAO,CAACC,EAAIC,EACd","x_google_ignoreList":[0]}