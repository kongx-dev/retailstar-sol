import{PublicKey as o,SystemProgram as t,SYSVAR_RENT_PUBKEY as n}from"@solana/web3.js";import{createInstructionV3 as s}from"../instructions/createInstructionV3.mjs";import{USDC_MINT as e,REGISTER_PROGRAM_ID as r,REFERRERS as m,PYTH_FEEDS as i,NAME_PROGRAM_ID as a,ROOT_DOMAIN_ACCOUNT as c,CENTRAL_STATE as d,PYTH_MAPPING_ACC as l,VAULT_OWNER as u}from"../constants.mjs";import{getHashedNameSync as f}from"../utils/getHashedNameSync.mjs";import{getNameAccountKeySync as p}from"../utils/getNameAccountKeySync.mjs";import{InvalidDomainError as w,PythFeedNotFoundError as h}from"../error.mjs";import{getAssociatedTokenAddressSync as j}from"../node_modules/@solana/spl-token/lib/esm/state/mint.mjs";import{createAssociatedTokenAccountIdempotentInstruction as g}from"../node_modules/@solana/spl-token/lib/esm/instructions/associatedTokenAccount.mjs";import{TOKEN_PROGRAM_ID as y}from"../node_modules/@solana/spl-token/lib/esm/constants.mjs";const I=async(I,b,k,v,A,x=e,B)=>{if(b.includes(".")||b.trim().toLowerCase()!==b)throw new w("The domain name is malformed");const S=f(b),T=p(S,void 0,c),_=f(T.toBase58()),N=p(_,d),[P]=o.findProgramAddressSync([T.toBuffer()],r),q=m.findIndex((o=>null==B?void 0:B.equals(o)));let C;const H=[];if(-1!==q&&B){C=j(x,B,!0);const o=await I.getAccountInfo(C);if(!(null==o?void 0:o.data)){const o=g(v,C,B,x);H.push(o)}}const K=j(x,u,!0),L=i.get(x.toBase58());if(!L)throw new h("The Pyth account for the provided mint was not found");const O=new s({name:b,space:k,referrerIdxOpt:-1!=q?q:null}).getInstruction(r,a,c,T,N,t.programId,d,v,A,l,new o(L.product),new o(L.price),K,y,n,P,C);return H.push(O),H};export{I as registerDomainName};
//# sourceMappingURL=registerDomainName.mjs.map
