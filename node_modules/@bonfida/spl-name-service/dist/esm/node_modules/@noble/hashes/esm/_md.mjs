import{Hash as t,createView as s,aexists as e,toBytes as i,abytes as n,aoutput as o,clean as r}from"./utils.mjs";function h(t,s,e,i){if("function"==typeof t.setBigUint64)return t.setBigUint64(s,e,i);const n=BigInt(32),o=BigInt(4294967295),r=Number(e>>n&o),h=Number(e&o),f=i?4:0,u=i?0:4;t.setUint32(s+f,r,i),t.setUint32(s+u,h,i)}function f(t,s,e){return t&s^~t&e}function u(t,s,e){return t&s^t&e^s&e}class c extends t{constructor(t,e,i,n){super(),this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.blockLen=t,this.outputLen=e,this.padOffset=i,this.isLE=n,this.buffer=new Uint8Array(t),this.view=s(this.buffer)}update(t){e(this),t=i(t),n(t);const{view:o,buffer:r,blockLen:h}=this,f=t.length;for(let e=0;e<f;){const i=Math.min(h-this.pos,f-e);if(i!==h)r.set(t.subarray(e,e+i),this.pos),this.pos+=i,e+=i,this.pos===h&&(this.process(o,0),this.pos=0);else{const i=s(t);for(;h<=f-e;e+=h)this.process(i,e)}}return this.length+=t.length,this.roundClean(),this}digestInto(t){e(this),o(t,this),this.finished=!0;const{buffer:i,view:n,blockLen:f,isLE:u}=this;let{pos:c}=this;i[c++]=128,r(this.buffer.subarray(c)),this.padOffset>f-c&&(this.process(n,0),c=0);for(let t=c;t<f;t++)i[t]=0;h(n,f-8,BigInt(8*this.length),u),this.process(n,0);const l=s(t),p=this.outputLen;if(p%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const d=p/4,g=this.get();if(d>g.length)throw new Error("_sha2: outputLen bigger than state");for(let t=0;t<d;t++)l.setUint32(4*t,g[t],u)}digest(){const{buffer:t,outputLen:s}=this;this.digestInto(t);const e=t.slice(0,s);return this.destroy(),e}_cloneInto(t){t||(t=new this.constructor),t.set(...this.get());const{blockLen:s,buffer:e,length:i,finished:n,destroyed:o,pos:r}=this;return t.destroyed=o,t.finished=n,t.length=i,t.pos=r,i%s&&t.buffer.set(e),t}clone(){return this._cloneInto()}}const l=Uint32Array.from([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),p=Uint32Array.from([1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209]);export{f as Chi,c as HashMD,u as Maj,l as SHA256_IV,p as SHA512_IV,h as setBigUint64};
//# sourceMappingURL=_md.mjs.map
